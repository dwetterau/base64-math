// Generated by CoffeeScript 1.8.0
(function() {
  var constants;

  constants = require('./constants');

  module.exports = {
    toNumber: function(base_64) {
      var i, num, _i, _j, _len, _ref, _ref1, _results;
      num = 0;
      _ref1 = (function() {
        _results = [];
        for (var _j = 0, _ref = base_64.length; 0 <= _ref ? _j <= _ref : _j >= _ref; 0 <= _ref ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this).reverse();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        num <<= 6;
        num |= constants.base_to_num_map[base_64.charAt(i)];
      }
      return num;
    },
    toBase64: function(num) {
      var base_64;
      base_64 = '';
      while (num > 0) {
        base_64 += constants.num_to_base_map[num & 63];
        num >>= 6;
      }
      if (base_64.length === 0 && num === 0) {
        return constants.num_to_base_map[0];
      }
      return base_64;
    },
    add: function(num1, num2) {
      var val, val1, val2;
      val1 = this.toNumber(num1);
      val2 = this.toNumber(num2);
      val = val1 + val2;
      return this.toBase64(val);
    },
    subtract: function(num1, num2) {
      var val, val1, val2;
      val1 = this.toNumber(num1);
      val2 = this.toNumber(num2);
      val = val1 - val2;
      return this.toBase64(val);
    },
    multiply: function(num1, num2) {
      var val, val1, val2;
      val1 = this.toNumber(num1);
      val2 = this.toNumber(num2);
      val = val1 * val2;
      return this.toBase64(val);
    },
    divide: function(num1, num2) {
      var val, val1, val2;
      val1 = this.toNumber(num1);
      val2 = this.toNumber(num2);
      val = val1 / val2;
      return this.toBase64(val);
    },
    mod: function(num1, num2) {
      var val, val1, val2;
      val1 = this.toNumber(num1);
      val2 = this.toNumber(num2);
      val = val1 % val2;
      return this.toBase64(val);
    },
    gcd: function(num1, num2) {
      var temp;
      while (num2 !== constants.num_to_base_map[0]) {
        temp = num2;
        num2 = this.mod(num1, num2);
        num1 = temp;
      }
      return num1;
    },
    lcm: function(num1, num2) {
      var bottom, top;
      top = this.multiply(num1, num2);
      bottom = this.gcd(num1, num2);
      return this.divide(top, bottom);
    },
    compare: function(num1, num2) {
      var diff, i, length_diff, v1, v2, _i, _ref;
      num1 = this.trim(num1);
      num2 = this.trim(num2);
      length_diff = num1.length - num2.length;
      if (length_diff !== 0) {
        return length_diff;
      }
      for (i = _i = _ref = num1.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        v1 = constants.base_to_num_map[num1.charAt(i)];
        v2 = constants.base_to_num_map[num2.charAt(i)];
        diff = v1 - v2;
        if (diff !== 0) {
          return diff;
        }
      }
      return 0;
    },
    right_shift: function(num) {
      var base64, has_carry, i, val, _i, _ref;
      has_carry = false;
      base64 = '';
      for (i = _i = _ref = num.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        val = constants.right_shift_map[num.charAt(i)];
        if (has_carry) {
          base64 = val.carry_val + base64;
        } else {
          base64 = val.val + base64;
        }
        has_carry = val.makes_carry;
      }
      return this.trim(base64);
    },
    left_shift: function(num) {
      var base64, has_carry, i, val, _i, _ref;
      has_carry = false;
      base64 = '';
      for (i = _i = 0, _ref = num.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        val = constants.left_shift_map[num.charAt(i)];
        if (has_carry) {
          base64 += val.carry_val;
        } else {
          base64 += val.val;
        }
        has_carry = val.makes_carry;
      }
      if (has_carry) {
        base64 += constants.num_to_base_map[1];
      }
      return base64;
    },
    trim: function(num) {
      var i, index, _i, _j, _len, _ref, _ref1, _results;
      index = num.length;
      _ref1 = (function() {
        _results = [];
        for (var _j = 0, _ref = num.length - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; 0 <= _ref ? _j++ : _j--){ _results.push(_j); }
        return _results;
      }).apply(this).reverse();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        if (num.charAt(i) === 'A') {
          index = i;
        } else {
          break;
        }
      }
      return num.substring(0, Math.max(index, 1));
    }
  };

}).call(this);
