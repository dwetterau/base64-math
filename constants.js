// Generated by CoffeeScript 1.8.0
(function() {
  var num_to_base_map;

  num_to_base_map = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'];

  module.exports = {
    num_to_base_map: num_to_base_map,
    base_to_num_map: (function() {
      var base_64, index, map, _i, _len;
      map = {};
      for (index = _i = 0, _len = num_to_base_map.length; _i < _len; index = ++_i) {
        base_64 = num_to_base_map[index];
        map[base_64] = index;
      }
      return map;
    })(),
    right_shift_map: (function() {
      var i, right_map, _i;
      right_map = {};
      for (i = _i = 0; _i <= 63; i = ++_i) {
        right_map[num_to_base_map[i]] = {
          val: num_to_base_map[i >> 1],
          carry_val: num_to_base_map[(i >> 1) | (1 << 5)],
          makes_carry: Boolean(i & 1)
        };
      }
      return right_map;
    })(),
    left_shift_map: (function() {
      var i, left_map, _i;
      left_map = {};
      for (i = _i = 0; _i <= 63; i = ++_i) {
        left_map[num_to_base_map[i]] = {
          val: num_to_base_map[(i << 1) & 63],
          carry_val: num_to_base_map[((i << 1) | 1) & 63],
          makes_carry: Boolean(i & (1 << 5))
        };
      }
      return left_map;
    })()
  };

}).call(this);
